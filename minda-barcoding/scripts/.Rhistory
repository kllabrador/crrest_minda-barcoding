mutate (taxa_id = str_replace(taxa_id, "Cromileptes", "Chromileptes"),
taxa_id = str_replace(taxa_id, "Xiphocheilus", "Choerodon"),
taxa_id = str_replace(taxa_id, "Ariomma brevimanum", "Ariomma brevimanus"),
taxa_id = str_replace(taxa_id, "Liopropoma sp.", "Liopropoma sp.1"),
taxa_id = str_replace(taxa_id, "Parupeneus heptacantha", "Parupeneus heptacanthus"),
) %>%
# Separate "taxa_id" into genus and species"
separate_wider_delim(taxa_id,
delim = "_",
names = c("genus", "species"),
too_few = "align_start",
cols_remove = F
) %>%
# Remove underscores
mutate (scientific_name = str_replace(taxa_id, "_", " ")
) %>%
left_join(genus.list, by = "genus")
data.bkp <- as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
# Create the sequence list.
querySeq <- aln.fas%>%
as.dna %>%
as.list %>%
map(~.x %>%
toupper %>%
str_flatten(collapse="")
)
# Change names of querySeq
new.names <- sapply (str_split(names(querySeq), "\\|"), function (x) x[3])
names(querySeq) <- new.names
# Query the sequences to BOLD. Runtime depends on the data size (no. of sequences, sequence length).
BOLD.ID <- map(querySeq[1:5],
~bold_identify(sequences=.x
, db='COX1_SPECIES')
)
# Determine the sequences that were not identified
no.ID <- map(BOLD.ID
, ~.x[[1]]) %>%
keep(is.null) %>% names()
# Coerce the list into a data frame.
BOLD.ID.df <- map(BOLD.ID
, ~.x[[1]]) %>%
plyr::ldply(.id="SampleID")
# Save the data.frame for future reference.
write.csv(BOLD.ID.df, paste0(outdir, "BOLD-ID.csv"))
species.count_barcodes <- data.bkp %>%
select (scientific_name) %>%
distinct %>%
nrow()
genus.count_barcodes <- data.bkp %>%
select (genus) %>%
distinct %>%
nrow()
family.count_barcodes <- data.bkp %>%
select (family) %>%
distinct %>%
nrow()
species.count_full <- master_list %>%
select (scientific_name) %>%
distinct %>%
nrow()
genus.count_full <- master_list %>%
select (genus) %>%
distinct %>%
nrow()
family.count_full <- master_list %>%
select (family) %>%
distinct %>%
nrow()
family.count_full
knitr::opts_chunk$set(echo = TRUE
, results = 'hide'
, warning = FALSE
, message = FALSE
, fig.height = 5
, fig.width = 5
)
# Clear the global environment.
rm(list=ls())
# Set-up the working directory in the source file location:
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
wd <- getwd() # Do this after the working directory was set to source file location
# Assign directories to objects in the global environment
indir <- paste0("../data/")
outdir <- paste0("../results/")
scripts <- paste0("../scripts/")
# Check content of indir using list.files()
list.files(indir)
list.files(scripts)
pacman::p_load (
# Data wrangling
tidyverse, janitor,
# Plotting
cowplot, ggtree,
# Interfacing with sequence data
ape, bold, bioseq, haplotypes, phangorn,
# Statistical calculations
rstatix)
# Fasta file of the alignment
## Make sure that the alignment is done outside R.
infile_fasta <- paste0(indir,
"20240120_bold-aln.fas")
infile_csv <- list.files(paste0(indir,
"BOLD-output"),
pattern = "\\.csv$",
full.names = T)
infile_csv_filenames <- list.files(paste0(indir,
"BOLD-output"),
pattern = "\\.csv$")
aln.fas <- read.FASTA(infile_fasta,
type = "DNA")
files.csv <- lapply (infile_csv,
read.csv,
na.strings = "N/A") %>%
map(., ~clean_names(.x))
names(files.csv) <- infile_csv_filenames
# MAF's appendix table 3
MAF.species.list <- readxl::read_xlsx(paste0(indir, "MAF_species-list.xlsx"),
sheet = "species-list_2024-11") %>%
clean_names() %>%
select (family, scientific_name, data, barcode) %>%
distinct() %>%
separate_wider_delim(cols = scientific_name,
names = c("genus", "species"),
delim = " ",
cols_remove = F,
too_many="merge") %>%
mutate (source1 = "MAF")
# BOLD dataset
BOLD.species.list <- files.csv$`project-metadata_taxonomy.csv` %>%
clean_names() %>%
# Add Cymatognathus aureolateralis (this is not yet included in BOLD automated system)
mutate (species = case_when (sample_id %in% c("FDP_GOVG_2207_014A","FDP_GOVG_2207_014B") ~ "Cymatognathus aureolateralis",
T ~ species)
) |>
select (species) %>%
# Change genus names as appropriate (these cases are when BOLD Systems has not been updated yet)
mutate (species = str_replace(species, "Cromileptes", "Chromileptes"),
species = str_replace(species, "Xiphocheilus", "Choerodon"),
species = str_replace(species, "Ariomma brevimanum", "Ariomma brevimanus"),
species = str_replace(species, "Liopropoma sp.", "Liopropoma sp.1"),
species = str_replace(species, "Parupeneus heptacantha", "Parupeneus heptacanthus"),
) %>%
mutate (barcode = "Y",
source2 = "BOLD") %>%
rename (scientific_name = species) %>%
distinct()
# Check unique species count
species_list_full <- c(MAF.species.list$scientific_name, BOLD.species.list$scientific_name) %>%
unique() %>% sort ()
species_list_unidentified <- species_list_full[which (grepl("sp.", species_list_full, fixed=T))]
species_list_identified_count <- length (species_list_full) - length (species_list_unidentified)
species_list_identified_count
# Join the two datasheets
master_list <- full_join (MAF.species.list, BOLD.species.list, by = c("scientific_name", "barcode")) %>%
# Change Scaridae to Labridae
mutate (family = str_replace (family, "Scaridae", "Labridae")) %>%
# Modify "data" field
mutate (data = case_when (barcode %in% "Y" ~ "with barcodes",
grepl ("MSD", data) ~ "MSD",
T ~ "FVC"))
# Check for discrepancies between the two datasets.
validate_list <- master_list %>% filter (barcode == "Y")
write.csv(validate_list, paste0(outdir, "validate_species_list.csv"))
genus.list <- master_list %>%
select (family, genus) %>%
distinct
aln.metadata <- data.frame (label = names(aln.fas)) %>%
# Separate labels into their respective fields.
separate_wider_delim(label,
delim = "|",
names = c("process_id", "taxa_id", "sample_id", "bin", "accession_no"),
cols_remove = F
) %>%
# Change genus names as appropriate (these cases are when BOLD Systems has not been updated yet)
mutate (taxa_id = str_replace(taxa_id, "Cromileptes", "Chromileptes"),
taxa_id = str_replace(taxa_id, "Xiphocheilus", "Choerodon"),
taxa_id = str_replace(taxa_id, "Ariomma brevimanum", "Ariomma brevimanus"),
taxa_id = str_replace(taxa_id, "Liopropoma sp.", "Liopropoma sp.1"),
taxa_id = str_replace(taxa_id, "Parupeneus heptacantha", "Parupeneus heptacanthus"),
) %>%
# Separate "taxa_id" into genus and species"
separate_wider_delim(taxa_id,
delim = "_",
names = c("genus", "species"),
too_few = "align_start",
cols_remove = F
) %>%
# Remove underscores
mutate (scientific_name = str_replace(taxa_id, "_", " ")
) %>%
left_join(genus.list, by = "genus")
data.bkp <- as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
# Create the sequence list.
querySeq <- aln.fas%>%
as.dna %>%
as.list %>%
map(~.x %>%
toupper %>%
str_flatten(collapse="")
)
# Change names of querySeq
new.names <- sapply (str_split(names(querySeq), "\\|"), function (x) x[3])
names(querySeq) <- new.names
# Query the sequences to BOLD. Runtime depends on the data size (no. of sequences, sequence length).
BOLD.ID <- map(querySeq[1:5],
~bold_identify(sequences=.x
, db='COX1_SPECIES')
)
# Determine the sequences that were not identified
no.ID <- map(BOLD.ID
, ~.x[[1]]) %>%
keep(is.null) %>% names()
# Coerce the list into a data frame.
BOLD.ID.df <- map(BOLD.ID
, ~.x[[1]]) %>%
plyr::ldply(.id="SampleID")
# Save the data.frame for future reference.
write.csv(BOLD.ID.df, paste0(outdir, "BOLD-ID.csv"))
species.count_barcodes <- data.bkp %>%
select (scientific_name) %>%
distinct %>%
nrow()
genus.count_barcodes <- data.bkp %>%
select (genus) %>%
distinct %>%
nrow()
family.count_barcodes <- data.bkp %>%
select (family) %>%
distinct %>%
nrow()
species.count_full <- master_list %>%
select (scientific_name) %>%
distinct %>%
nrow()
genus.count_full <- master_list %>%
select (genus) %>%
distinct %>%
nrow()
family.count_full <- master_list %>%
select (family) %>%
distinct %>%
nrow()
family_count <- master_list %>%
group_by (family, data) %>%
summarize (count = n()) %>%
mutate (sum = cumsum(count),
max_sum = max (sum)) %>%
arrange (desc(max_sum)) %>%
ungroup()
# Create a character vector to relevel the family based on counts.
family_relevel <- family_count$family %>%
unique()
# Relevel family.
family_count <- family_count %>%
mutate (family_relevel = factor(family, levels = family_relevel))
# Split data frame into three:
partition1 <- family_count[family_count$max_sum >= 10, ]
partition2 <- family_count[family_count$max_sum >= 2 & family_count$max_sum < 10, ]
partition3 <- family_count[family_count$max_sum == 1, ]
plot_family_count <- function(family_count_df_parition) {
plot <-
ggplot (family_count_df_parition,
aes (x = family_relevel,
y = count,
fill = data)
) +
geom_col(col = "black",
position = "stack") +
theme_classic()  +
labs (x = "Family",
y = "Number of species") +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle=45,
vjust = 1,
hjust = 1,
size = 8.5)) +
#scale_fill_brewer(palette = "Set3") +
scale_fill_brewer (palette = "Set2") +
theme(legend.position = "top",
legend.title = element_blank())
return(plot)
}
plot_family_count_partition1 <- plot_family_count(partition1) +
scale_y_continuous(breaks = seq(0, 150, 10))
plot_family_count_partition2 <- plot_family_count(partition2)
plot_family_count_partition3 <- plot_family_count(partition3)
require(ggpubr)
plot_family_count_total <-
ggpubr::ggarrange(plot_family_count_partition1 +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()),
plot_family_count_partition2 +
theme (axis.title.x = element_blank(),
axis.title.y = element_blank()),
plot_family_count_partition3 +
theme (axis.title.y = element_blank()) +
scale_y_continuous(breaks = c(0,1)),
nrow = 3,
heights = c(2,1,0.75),
common.legend = T) %>%
annotate_figure(left = text_grob("Number of species", rot = 90))
ggexport(plot_family_count_total,
filename = paste0(outdir,
"fig2_family-count_barplot.png"),
height = 2500,
width = 2100,
res = 300
)
source ("calculate-K2P.R")
# species.dist <- files.csv$`divergence_within-species.csv` %>%
#   mutate (level = "species")
#
# genus.dist <- files.csv$`divergence_wthin-genus.csv` %>%
#   mutate (level = "genus")
#
# family.dist <- files.csv$`divergence_within-family.csv` %>%
#   mutate (level = "family")
#
# dist.df <- rbind (k80.species.df,
#                   k80.family.df,
#                   k80.genus.df) %>%
#   mutate (level = fct_relevel(level, "species", "genus", "family"))
dist.stats <- dist.df %>%
group_by(level) %>%
get_summary_stats(distance)
plot_distance_histogram <-
ggplot(dist.df, aes(x = distance, fill = level)) +
geom_histogram(position = "dodge",
col = "white",
size = 0.30,
aes (y = after_stat(density))
) +
scale_x_continuous(breaks = seq(0, 30, by=2)) +
scale_y_continuous(breaks = seq(0, 1, by=0.1),
labels = scales::percent) +
coord_cartesian(expand = F) +
labs(x = "K2P Genetic Distance (%)",
y = "Frequency",
fill = "Taxonomic\nRank"
) +
theme_classic() +
scale_fill_brewer(palette = "Set1")
plot_distance_histogram
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
pivot_longer(cols = c(mean_intra_sp,max_intra_sp, distance_to_nn),
names_to = "comp",
values_to = "dist"
) %>%
na.omit() %>%
mutate (comp = case_when (grepl("max_intra_sp", comp) ~ "intraspecific (max)",
grepl("distance_to_nn", comp) ~ "interspecific (NN)",
T ~ comp)) %>%
group_by (comp)
barcode_gap.stats <- barcode_gap %>%
group_by(comp) %>%
get_summary_stats(dist)
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
lims(x = c(0, 25)) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
mutate (barcode_gap = ifelse (max_intra_sp <= 2.2 & distance_to_nn > 2.2,
"within RESL\nthreshold",
"outside RESL\nthreshold")
)
plot_barcode_gap_scatterplot <-
ggplot (data = barcode_gap,
aes (x = max_intra_sp,
y = distance_to_nn,
fill = barcode_gap)
) +
geom_jitter(pch=21,
alpha = 0.50,
col = "black",
size = 1.25) +
theme_classic() +
coord_cartesian(expand = F) +
lims (x = c(-0.5,25),
y = c(-0.5,25)
) +
labs (x = "Maximum Intra-specific Distance (%)",
y = "Interspecific (NN)\nDistance (%)",
fill = NULL) +
geom_abline(intercept = 0, lty = 2) +
scale_fill_brewer (palette = "Set1") +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_scatterplot
fig3 <-
plot_grid(
plot_distance_histogram +
theme (legend.position = "top"),
plot_grid (plot_barcode_gap_histogram +
theme (legend.position = "top"),
plot_barcode_gap_scatterplot +
theme (legend.position = "top"),
labels = c("B", "C")),
nrow = 2,
labels = c("A", NA)
)
fig3
ggsave(fig3,
file = paste0(outdir,
"fig3_genetic-distances.png"),
height = 5.5,
width = 7,
units = "in",
dpi = 330
)
bin_concordant <- files.csv$`binDiscordance-CONCORDANT-BINS.csv`
bin_discordant <- files.csv$`binDiscordance-DISCORDANT-BINS.csv`
bin_singleton <- files.csv$`binDiscordance-SINGLETON-BINS.csv`
OTU_cluster <- files.csv$cluster_sequence.csv
# Identify different species that were binned in the same OTU.
discordance_case1 <- OTU_cluster %>%
group_by(otu) %>%
filter (length (unique (taxon)) > 1 ) %>%
ungroup() %>%
select (otu, taxon) %>%
distinct
# Identify same species that were binned in separate OTUs.
discordance_case2 <- OTU_cluster %>%
group_by(taxon) %>%
filter (length (unique (otu)) > 1 ) %>%
ungroup() %>%
select (otu, taxon) %>%
distinct
discordance_case1
discordance_case2
t <- cbind(discordance_case1,
discordance_case2)
t
t <- rbind(discordance_case1,
discordance_case2)
t
t <- rbind(discordance_case1,
discordance_case2) |>
pull(taxon) |>
unique() |>
sort()
t
family_count
plot_family_count_total
family_count
family.count_full
view(family_count)
species.count_barcodes <- data.bkp %>%
select (scientific_name) %>%
distinct %>%
nrow()
genus.count_barcodes <- data.bkp %>%
select (genus) %>%
distinct %>%
nrow()
family.count_barcodes <- data.bkp %>%
select (family) %>%
distinct %>%
nrow()
species.count_barcodes
genus.count_barcodes
family.count_barcodes
family.count_barcodes <- data.bkp %>%
select (family) %>%
distinct
family.count_barcodes
family_count
view(family_count)
family.count_barcodes
family_count |>
family_count |> filter (data == "with barcodes") |> view()
dist.stats <- dist.df %>%
group_by(level) %>%
get_summary_stats(distance)
dist.stats
dist.df
dist.stats
dist.stats$sd
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
pivot_longer(cols = c(mean_intra_sp,max_intra_sp, distance_to_nn),
names_to = "comp",
values_to = "dist"
) %>%
na.omit() %>%
mutate (comp = case_when (grepl("max_intra_sp", comp) ~ "intraspecific (max)",
grepl("distance_to_nn", comp) ~ "interspecific (NN)",
T ~ comp)) %>%
group_by (comp)
barcode_gap.stats <- barcode_gap %>%
group_by(comp) %>%
get_summary_stats(dist)
barcode_gap.stats
19/357
family_count
family_count |> view()
